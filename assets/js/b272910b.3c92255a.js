"use strict";(self.webpackChunkdial=self.webpackChunkdial||[]).push([[4048],{521:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var i=r(5893),t=r(1151);const o={},s="Observability and Monitoring",l={id:"Observability/Observability",title:"Observability and Monitoring",description:"AI DIAL components provide the following types of monitoring/observability:",source:"@site/docs/Observability/Observability.md",sourceDirName:"Observability",slug:"/Observability/",permalink:"/Observability/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"CustomSideBar",previous:{title:"How to call image-to-text DIAL applications",permalink:"/Cookbook/dial-cookbook/examples/how_to_call_image_to_text_applications"},next:{title:"DIAL Product Overview",permalink:"/video demos/demos/dial-product-overview"}},a={},d=[{value:"Container Logs",id:"container-logs",level:2},{value:"AI DIAL Configuration",id:"ai-dial-configuration",level:3},{value:"Chat",id:"chat",level:4},{value:"Core",id:"core",level:4},{value:"Bedrock Adapter",id:"bedrock-adapter",level:4},{value:"Vertex Adapter",id:"vertex-adapter",level:4},{value:"OpenAI Adapter",id:"openai-adapter",level:4},{value:"DIAL Adapter",id:"dial-adapter",level:4},{value:"Prometheus",id:"prometheus",level:2},{value:"Configure AI DIAL Components",id:"configure-ai-dial-components",level:3},{value:"Configure DIAL Helm Charts",id:"configure-dial-helm-charts",level:3},{value:"OpenTelemetry",id:"opentelemetry",level:2},{value:"AI DIAL Configuration",id:"ai-dial-configuration-1",level:3},{value:"Python Components",id:"python-components",level:4},{value:"Node.js Components",id:"nodejs-components",level:4}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"observability-and-monitoring",children:"Observability and Monitoring"}),"\n",(0,i.jsx)(n.p,{children:"AI DIAL components provide the following types of monitoring/observability:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Logs (",(0,i.jsx)(n.a,{href:"#container-logs",children:"Container logs"})," or ",(0,i.jsx)(n.a,{href:"#opentelemetry",children:"OTel"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Metrics (",(0,i.jsx)(n.a,{href:"#prometheus",children:"Prometheus"})," or ",(0,i.jsx)(n.a,{href:"#opentelemetry",children:"OTel"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Traces (",(0,i.jsx)(n.a,{href:"#opentelemetry",children:"OTel"}),")"]}),"\n"]}),"\n",(0,i.jsxs)("div",{class:"docusaurus-ignore",children:[(0,i.jsx)(n.h1,{id:"table-of-contents",children:"Table of Contents"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#container-logs",children:"Container Logs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#ai-dial-configuration",children:"AI DIAL Configuration"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#chat",children:"Chat"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#core",children:"Core"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#bedrock-adapter",children:"Bedrock Adapter"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#vertex-adapter",children:"Vertex Adapter"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#openai-adapter",children:"OpenAI Adapter"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#dial-adapter",children:"DIAL Adapter"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#prometheus",children:"Prometheus"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#configure-ai-dial-components",children:"Configure AI DIAL Components"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#configure-dial-helm-charts",children:"Configure DIAL Helm Charts"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#opentelemetry",children:"OpenTelemetry"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#ai-dial-configuration-1",children:"AI DIAL Configuration"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#python-components",children:"Python Components"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#nodejs-components",children:"Node.js Components"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"container-logs",children:"Container Logs"}),"\n",(0,i.jsx)(n.p,{children:"Unix and Linux commands typically open three I/O streams when they run, called STDIN, STDOUT, and STDERR."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"STDIN is the command's input stream, which may include input from the keyboard or input from another command."}),"\n",(0,i.jsx)(n.li,{children:"STDOUT is usually a command's normal output."}),"\n",(0,i.jsx)(n.li,{children:"STDERR is typically used to output error messages."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"AI DIAL components by default use this approach for outputting system logs."}),"\n",(0,i.jsx)(n.h3,{id:"ai-dial-configuration",children:"AI DIAL Configuration"}),"\n",(0,i.jsx)(n.h4,{id:"chat",children:"Chat"}),"\n",(0,i.jsx)(n.p,{children:"AI DIAL supports OpenTelemetry (OTEL) methods to enhance observability by providing powerful metrics for collection and tracing capabilities, enabling deeper insights into system performance and behavior."}),"\n",(0,i.jsxs)(n.p,{children:["All environment variables you can find in the official OpenTelemetry Collector Logs Exporter for web and node with HTTP ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/@opentelemetry/exporter-logs-otlp-http",children:"documentation"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: #The endpoint to send logs to. By default https://localhost:4318/v1/logs will be used. v1/logs will not be appended automatically and has to be added explicitly.\nOTEL_EXPORTER_OTLP_LOGS_TIMEOUT: #The maximum waiting time, in milliseconds, allowed to send each OTLP log batch. Default is 10000.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["AI DIAL supports OpenTelemetry SDK for Node.js. All environment variables you can find in the official OpenTelemetry SDK for Node.js ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/@opentelemetry/sdk-node",children:"documentation"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"OTEL_SDK_DISABLED: #Disable the SDK by setting the OTEL_SDK_DISABLED environment variable to `true`\nOTEL_LOG_LEVEL: #Log level used by the SDK logger.` Values: `TRACE, DEBUG, INFO, WARN, ERROR, FATAL`. Use `DEBUG` for dev purposes and INFO in prod. It is strongly recommended not to use the logging level `DEBUG` for prod purposes.\n"})}),"\n",(0,i.jsx)(n.h4,{id:"core",children:"Core"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/epam/ai-dial-core",children:"DIAL Core"})," is the main component of AI DIAL, which provides ",(0,i.jsx)(n.a,{href:"https://epam-rail.com/dial_api",children:"Unified API"})," to different chat completion and embedding models, assistants, and applications."]}),"\n",(0,i.jsx)(n.p,{children:"These environment variables you can use to configure logging:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"AIDIAL_LOG_FILE: #Place when the log file should be stored.\nAIDIAL_LOG_LEVEL: #The logging levels used are ERROR, WARN, INFO, DEBUG, and TRACE.\n"})}),"\n",(0,i.jsx)(n.h4,{id:"bedrock-adapter",children:"Bedrock Adapter"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/epam/ai-dial-adapter-bedrock",children:"AI DIAL Bedrock Adapter"})," implements AI DIAL API for language models from AWS Bedrock."]}),"\n",(0,i.jsx)(n.p,{children:"These environment variables you can use to configure logging:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"LOG_LEVEL: #Level filter for the Adapter logger. Values: `TRACE, DEBUG, INFO, WARN, ERROR, FATAL`. Use `DEBUG` for dev purposes and INFO in prod. It is strongly recommended not to use the logging level `DEBUG` for prod purposes.\nAIDIAL_LOG_LEVEL: #AI DIAL SDK Level filter for the LLM and response logging. Values: `TRACE, DEBUG, INFO, WARNING, ERROR, FATAL`.\n"})}),"\n",(0,i.jsx)(n.h4,{id:"vertex-adapter",children:"Vertex Adapter"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/epam/ai-dial-adapter-vertexai",children:"AI DIAL Vertex AI Adapter"})," implements AI DIAL API for language models and embeddings from Vertex AI."]}),"\n",(0,i.jsx)(n.p,{children:"These environment variables you can use to configure logging:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"LOG_LEVEL: #Level filter for the Adapter logger. Values: `TRACE, DEBUG, INFO, WARN, ERROR, FATAL`. Use `DEBUG` for dev purposes and INFO in prod. It is strongly recommended not to use the logging level `DEBUG` for prod purposes.\nAIDIAL_LOG_LEVEL: #AI DIAL SDK Level filter for the LLM and response logging. Values: `TRACE, DEBUG, INFO, WARNING, ERROR, FATAL`.\n"})}),"\n",(0,i.jsx)(n.h4,{id:"openai-adapter",children:"OpenAI Adapter"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/epam/ai-dial-adapter-openai",children:"AI DIAL OpenAI Adapter"})," implements AI DIAL API for language models from Azure OpenAI."]}),"\n",(0,i.jsx)(n.p,{children:"These environment variables you can use to configure logging:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"LOG_LEVEL: #Level filter for the Adapter logger. Values: `TRACE, DEBUG, INFO, WARN, ERROR, FATAL`. Use `DEBUG` for dev purposes and INFO in prod. It is strongly recommended not to use the logging level `DEBUG` for prod purposes.\n"})}),"\n",(0,i.jsx)(n.h4,{id:"dial-adapter",children:"DIAL Adapter"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/epam/ai-dial-adapter-dial",children:"DIAL Adapter"})," adapts calls from one DIAL Core to calls to another DIAL Core."]}),"\n",(0,i.jsx)(n.p,{children:"These environment variables you can use to configure logging:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"LOG_LEVEL: #Level filter for the Adapter logger. Values: `TRACE, DEBUG, INFO, WARN, ERROR, FATAL`. Use `DEBUG` for dev purposes and INFO in prod. It is strongly recommended not to use the logging level `DEBUG` for prod purposes.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"prometheus",children:"Prometheus"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://prometheus.io/",children:"Prometheus"})," is an open-source monitoring and alerting toolkit designed for reliability and scalability. It collects metrics from configured targets at specified intervals, stores them in a time-series database, and provides powerful querying capabilities. With its flexible architecture, Prometheus is particularly suited for dynamic environments, making it a popular choice for cloud-native applications and microservices. Its intuitive visualization tools help to gain deep insights into system performance, ensuring timely detection of issues."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://prometheus-operator.dev/",children:"Prometheus Operator"})," manages Prometheus clusters atop Kubernetes."]}),"\n",(0,i.jsx)(n.h3,{id:"configure-ai-dial-components",children:"Configure AI DIAL Components"}),"\n",(0,i.jsxs)(n.p,{children:["By default, AI DIAL components have metrics enabled in Prometheus format on port ",(0,i.jsx)(n.strong,{children:"9464"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"configure-dial-helm-charts",children:"Configure DIAL Helm Charts"}),"\n",(0,i.jsxs)(n.p,{children:["Add the following helm values to AI DIAL Helm. Refer to ",(0,i.jsx)(n.a,{href:"https://github.com/epam/ai-dial-helm/tree/main/charts/dial",children:"AI DIAL Helm"})," to learn more."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"<component>:\n  metrics:\n    enabled: true \n    serviceMonitor:\n      enabled: true # when using the Prometheus Operator\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The default port for collecting metrics in AI DIAL components is 9464. You can change the parameter ",(0,i.jsx)(n.code,{children:"<component>.containerPorts.metrics"})," to change the default port."]}),"\n",(0,i.jsx)(n.h2,{id:"opentelemetry",children:"OpenTelemetry"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry"})," is an open-source observability framework designed to standardize the collection of telemetry data across distributed systems. By providing a unified set of APIs, libraries, and agents, it enables developers to capture traces, metrics, and logs from their applications seamlessly. OpenTelemetry simplifies the monitoring process and enhances visibility into application performance and reliability, making it easier to troubleshoot issues and optimize systems in real-time."]}),"\n",(0,i.jsx)(n.p,{children:"AI DIAL supports OpenTelemetry (OTEL) methods to enhance observability by providing powerful metrics for collection and tracing capabilities, enabling deeper insights into system performance and behavior."}),"\n",(0,i.jsx)(n.h3,{id:"ai-dial-configuration-1",children:"AI DIAL Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["All environment variables you can find in the official OpenTelemetry ",(0,i.jsx)(n.a,{href:"https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/",children:"documentation"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"python-components",children:"Python Components"}),"\n",(0,i.jsxs)(n.p,{children:["All standard python environment variables you can find in the official OpenTelemetry ",(0,i.jsx)(n.a,{href:"https://opentelemetry-python-contrib.readthedocs.io/en/latest/instrumentation/logging/logging.html",children:"documentation"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If the value for ",(0,i.jsx)(n.strong,{children:"OTEL_METRICS_EXPORTER"})," is not set, the ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/@opentelemetry/exporter-prometheus",children:"OpenTelemetry Prometheus Metric Exporter"})," will be used."]}),"\n",(0,i.jsxs)(n.li,{children:["If its value is set to ",(0,i.jsx)(n.code,{children:'"otlp"'}),", the ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/@opentelemetry/exporter-metrics-otlp-http",children:"OpenTelemetry Collector Metrics Exporter for Web and Node"})," will be used."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example configuration of OpenTelemetry:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'  OTEL_RESOURCE_ATTRIBUTES: "service.name=<service_name>" # Key-value pairs to be used as resource attributes\n  OTEL_EXPORTER_OTLP_ENDPOINT: "<otlp_endpoint_url>" # OTEL endpoint URL\n  OTEL_LOGS_EXPORTER: "otlp" # logs exporter to be used\n  OTEL_METRICS_EXPORTER: "otlp|otlp,prometheus" # metrics exporter to be used\n  OTEL_TRACES_EXPORTER: "otlp" # trace exporter to be used\n  OTEL_PYTHON_LOG_CORRELATION: "true|false" # enable trace context injection\n  OTEL_PYTHON_FASTAPI_EXCLUDED_URLS: "<exclude_url>" # to exclude certain URLs from tracking\n'})}),"\n",(0,i.jsx)(n.h4,{id:"nodejs-components",children:"Node.js Components"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If the value for ",(0,i.jsx)(n.strong,{children:"OTEL_METRICS_EXPORTER"})," is not set, the ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/@opentelemetry/exporter-prometheus",children:"OpenTelemetry Prometheus Metric Exporter"})," will be used."]}),"\n",(0,i.jsxs)(n.li,{children:["If its value is set to ",(0,i.jsx)(n.code,{children:'"otlp"'}),", the ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/@opentelemetry/exporter-metrics-otlp-http",children:"OpenTelemetry Collector Metrics Exporter for Web and Node"})," will be used."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example configuration of OpenTelemetry:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'  OTEL_SERVICE_NAME: "<service_name>" # Key-value pairs to be used as resource attributes\n  OTEL_EXPORTER_OTLP_ENDPOINT: "<otlp_endpoint_url>" # OTEL endpoint URL\n  OTEL_LOGS_EXPORTER: "otlp" # logs exporter to be used\n  OTEL_METRICS_EXPORTER: "otlp|otlp,prometheus" # metrics exporter to be used\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>s});var i=r(7294);const t={},o=i.createContext(t);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);