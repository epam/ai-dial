"use strict";(self.webpackChunkdial=self.webpackChunkdial||[]).push([[9150],{179:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var i=t(85893),o=t(11151);const s={},r="Integration of DIAL with n8n",a={id:"tutorials/developers/integrations/n8n-integration",title:"Integration of DIAL with n8n",description:"Introduction",source:"@site/docs/tutorials/1.developers/5.integrations/3.n8n-integration.md",sourceDirName:"tutorials/1.developers/5.integrations",slug:"/tutorials/developers/integrations/n8n-integration",permalink:"/tutorials/developers/integrations/n8n-integration",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"CustomSideBar",previous:{title:"DIAL Integration with Microsoft Teams",permalink:"/tutorials/developers/integrations/msteams-bot"},next:{title:"Integration of DIAL with Continue",permalink:"/tutorials/developers/integrations/vscode-extension"}},d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Create DIAL API Custom Node",id:"create-dial-api-custom-node",level:2},{value:"Prerequisites",id:"prerequisites",level:5},{value:"Step 1: Plan a node",id:"step-1-plan-a-node",level:3},{value:"Step 2: Build a node",id:"step-2-build-a-node",level:3},{value:"Step 3: Deploy a node",id:"step-3-deploy-a-node",level:3},{value:"How to Use the DIAL API Custom Node in Your Workflows",id:"how-to-use-the-dial-api-custom-node-in-your-workflows",level:2},{value:"Prerequisites",id:"prerequisites-1",level:5},{value:"Step 1: Access the DIAL API custom node",id:"step-1-access-the-dial-api-custom-node",level:3},{value:"Step 2: Authenticate the DIAL API custom node",id:"step-2-authenticate-the-dial-api-custom-node",level:3},{value:"Step 3: Use DIAL API custom node in a Workflow",id:"step-3-use-dial-api-custom-node-in-a-workflow",level:3},{value:"Examples of Workflows",id:"examples-of-workflows",level:3},{value:"DIAL Chat Completion",id:"dial-chat-completion",level:4}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"integration-of-dial-with-n8n",children:"Integration of DIAL with n8n"}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"DIAL is an open platform designed to avoid vendor lock-in, enabling seamless integration with external General AI (GenAI) applications, other AI-enabling systems, custom libraries and frameworks on any cloud or chosen environment."}),"\n",(0,i.jsx)(n.p,{children:"Being an orchestration platform, DIAL works alongside other AI-enabling systems to augment and expand their functionality."}),"\n",(0,i.jsxs)(n.p,{children:["This document provides an overview of how DIAL integrates with ",(0,i.jsx)(n.a,{href:"https://n8n.io/",children:"n8n"})," through a ",(0,i.jsx)(n.a,{href:"https://docs.n8n.io/integrations/creating-nodes/overview/",children:"custom node"}),". n8n is a free and open-source workflow automation tool that allows users to connect different applications, services, and APIs to automate tasks and processes."]}),"\n",(0,i.jsx)(n.p,{children:"This implementation also serves as a practical example of DIAL's integration with other systems."}),"\n",(0,i.jsx)(n.h2,{id:"create-dial-api-custom-node",children:"Create DIAL API Custom Node"}),"\n",(0,i.jsxs)(n.p,{children:["n8n organizes workflows using ",(0,i.jsx)(n.a,{href:"https://docs.n8n.io/workflows/components/nodes/",children:"nodes"})," - building blocks that perform specific actions, such as interacting with APIs, transforming data, or executing scripts."]}),"\n",(0,i.jsx)(n.p,{children:"Custom nodes are user-defined nodes built to enable advanced functionality beyond the scope of built-in nodes. They are highly customizable and ideal for handling unique business requirements, integrating uncommon APIs, or extending n8n to interact with tailored services like DIAL."}),"\n",(0,i.jsx)(n.h5,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["n8n installed and set up (locally or in the cloud). Refer to ",(0,i.jsx)(n.a,{href:"https://docs.n8n.io/hosting/installation/npm/",children:"n8n's installation guide"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"DIAL API key (required for authentication)."}),"\n",(0,i.jsx)(n.li,{children:"Node.js installed on your local machine for testing and deployment."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"step-1-plan-a-node",children:"Step 1: Plan a node"}),"\n",(0,i.jsx)(n.p,{children:"The DIAL API custom node will be represented as following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Type - ",(0,i.jsx)(n.a,{href:"https://docs.n8n.io/integrations/creating-nodes/plan/node-types/#action-nodes",children:"Action node"})]}),"\n",(0,i.jsxs)(n.li,{children:["Building approach - ",(0,i.jsx)(n.a,{href:"https://docs.n8n.io/integrations/creating-nodes/plan/choose-node-method/",children:"Declarative style"})]}),"\n",(0,i.jsxs)(n.li,{children:["UI components - ",(0,i.jsx)(n.a,{href:"https://docs.n8n.io/integrations/creating-nodes/plan/node-ui-design/#credentials",children:"Credentials, operations, fields"})]}),"\n",(0,i.jsxs)(n.li,{children:["Node file structure - ",(0,i.jsx)(n.a,{href:"https://docs.n8n.io/integrations/creating-nodes/build/reference/node-file-structure/",children:"Choose node file structure"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"step-2-build-a-node",children:"Step 2: Build a node"}),"\n",(0,i.jsxs)(n.p,{children:["To build and test the node you need to ",(0,i.jsx)(n.a,{href:"https://docs.n8n.io/integrations/creating-nodes/build/node-development-environment/",children:"set up a development environment"}),"."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Fetch the ",(0,i.jsx)(n.a,{href:"https://github.com/n8n-io/n8n-nodes-starter",children:"n8n project template"})," and remove examples from /nodes and /credentials folders."]}),"\n",(0,i.jsxs)(n.li,{children:["Generate a ",(0,i.jsx)(n.a,{href:"https://docs.n8n.io/integrations/creating-nodes/build/declarative-style-node/#step-4-set-up-authentication",children:"credentials file"})," named ",(0,i.jsx)(n.code,{children:"DialApi.credentials.ts"})," within the ",(0,i.jsx)(n.code,{children:"/credentials"})," directory, and include the code provided below."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { ICredentialType, INodeProperties } from 'n8n-workflow';\n\nexport class DialApi implements ICredentialType {\nname = 'dialApi';\ndisplayName = 'DIAL API';\ndocumentationUrl = 'https://<url_to_api_key_docs>/';\nproperties: INodeProperties[] = [\n        {\n        displayName: 'API Key',\n        name: 'apiKey',\n        type: 'string',\n        default: '',\n        required: true,\n        typeOptions: {\n                password: true, // Mask the value for security\n        },\n        description: 'The API key for the DIAL API.',\n        }\n];\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["Generate ",(0,i.jsx)(n.a,{href:"https://docs.n8n.io/integrations/creating-nodes/build/declarative-style-node/#step-5-add-node-metadata",children:"metadata file"})," named ",(0,i.jsx)(n.code,{children:"Dial.node.json"})," within the ",(0,i.jsx)(n.code,{children:"/nodes"})," directory, and include the code provided below."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n        "node": "n8n-nodes-base.dial",\n        "nodeVersion": "1.0",\n        "codexVersion": "1.0",\n        "categories": [\n        "Miscellaneous"\n        ],\n        "resources": {\n        "credentialDocumentation": [\n                {\n                "url": ""\n                }\n        ],\n        "primaryDocumentation": [\n                {\n                "url": ""\n                }\n        ]\n        }\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:["Generate ",(0,i.jsx)(n.a,{href:"https://docs.n8n.io/integrations/creating-nodes/build/declarative-style-node/#step-3-create-the-node",children:"node file"})," named ",(0,i.jsx)(n.code,{children:"Dial.node.ts"})," within the ",(0,i.jsx)(n.code,{children:"/nodes"})," directory, and include the code provided below. Placeholders (",(0,i.jsx)(n.code,{children:"<...>"}),") must be replaced with real data. Feel free to modify the code depending on your needs."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import {\nINodeType,\nINodeTypeDescription,\nINodeExecutionData,\nIExecuteFunctions,\nIDataObject\n} from 'n8n-workflow';\n\nexport class Dial implements INodeType {\ndescription: INodeTypeDescription = {\n        displayName: 'DIAL API',\n        name: 'dialApi',\n        group: ['transform'],\n        version: 1,\n        description: 'Call DIAL API for Chat Completions and Text Embeddings',\n        defaults: {\n        name: 'DIAL API',\n        },\n        icon: 'file:favicon.png',\n        inputs: ['main'],\n        outputs: ['main'],\n        credentials: [\n        {\n                name: 'dialApi',\n                required: true,\n        },\n        ],\n        requestDefaults: {\n        baseURL: '<URL to your DIAL deployment>',\n        headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n        },\n        },\n        properties: [\n        {\n                displayName: 'User Input',\n                name: 'userInput',\n                type: 'string',\n                default: '',\n                required: true,\n                description: \"The user's request to gather data.\",\n        },\n        {\n                displayName: 'Operation',\n                name: 'operation',\n                type: 'options',\n                options: [\n                {\n                        name: 'Chat Completion',\n                        value: 'chatCompletion',\n                        description: 'Call the Chat Completion endpoint',\n                },\n                {\n                        name: 'Text Embeddings',\n                        value: 'textEmbedding',\n                        description: 'Call the Text Embedding endpoint',\n                },\n                ],\n                default: 'chatCompletion',\n                description: 'Choose the DIAL API operation to perform',\n        },\n        ],\n};\n\nasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n        const credentials = await this.getCredentials('dialApi');\n\n        const apiKey = credentials.apiKey as string;\n        const userInput = this.getNodeParameter('userInput', 0) as string;\n        const operation = this.getNodeParameter('operation', 0) as string;\n\n        const baseUrl = `<URL to your DIAL deployment>`;\n        const apiVersion = '<Model version e.g. 2023-12-01-preview>';\n\n        let responseData: IDataObject;\n        if (operation === 'chatCompletion') {\n        // Chat Completion Endpoint\n        const endpointUrl = `${baseUrl}/openai/deployments/gpt-4/chat/completions?api-version=${apiVersion}`;\n        const body = {\n                messages: [{ role: 'user', content: userInput }],\n        };\n\n        responseData = await this.helpers.request({\n                method: 'POST',\n                url: endpointUrl,\n                headers: {\n                'Content-Type': 'application/json',\n                'Api-Key': apiKey,\n                },\n                body,\n                json: true,\n        });\n        } else if (operation === 'textEmbedding') {\n        // Text Embedding Endpoint\n        const endpointUrl = `${baseUrl}/openai/deployments/text-embedding-ada-002/embeddings?api-version=${apiVersion}`;\n        const body = {\n                input: userInput,\n        };\n\n        responseData = await this.helpers.request({\n                method: 'POST',\n                url: endpointUrl,\n                headers: {\n                'Content-Type': 'application/json',\n                'Api-Key': apiKey,\n                },\n                body,\n                json: true,\n        });\n        } else {\n        throw new Error(`Invalid operation: ${operation}`);\n        }\n\n        return this.prepareOutputData(this.helpers.returnJsonArray([\n        responseData\n        ]));\n}\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsxs)(n.li,{children:["Modify the ",(0,i.jsx)(n.code,{children:"package.json"})," with the following:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n        "name": "n8n-nodes-dial",\n        "version": "0.1.0",\n        "description": "DIAL API integrations",\n        "keywords": [\n                "n8n-community-node-package"\n        ],\n        "license": "MIT",\n        "homepage": "https://dialx.ai/",\n        "author": {\n                "name": "<John Doe>",\n                "email": "<John_Doe@yourcompany.com>"\n        },\n        "repository": {\n                "type": "git",\n                "url": "https://github.com/<yourcompany>/n8n-nodes-dial.git"\n        },\n        "main": "index.js",\n        "scripts": {\n                "build": "tsc && gulp build:icons",\n                "dev": "tsc --watch",\n                "format": "prettier nodes credentials --write",\n                "lint": "eslint nodes credentials package.json",\n                "lintfix": "eslint nodes credentials package.json --fix",\n                "prepublishOnly": "npm run build && npm run lint -c .eslintrc.prepublish.js nodes credentials package.json"\n        },\n        "files": [\n                "dist"\n        ],\n        "n8n": {\n                "n8nNodesApiVersion": 1,\n                "credentials": [\n                        "dist/credentials/DialApi.credentials.js"\n                ],\n                "nodes": [\n                        "dist/nodes/Dial/Dial.node.js"\n                ]\n        },\n        "devDependencies": {\n                "@types/express": "^4.17.6",\n                "@types/request-promise-native": "~1.0.15",\n                "@typescript-eslint/parser": "~5.45",\n                "eslint-plugin-n8n-nodes-base": "^1.11.0",\n                "gulp": "^4.0.2",\n                "n8n-core": "*",\n                "n8n-workflow": "*",\n                "prettier": "^2.7.1",\n                "typescript": "~4.8.4"\n        }\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"6",children:["\n",(0,i.jsxs)(n.li,{children:["(Optional) Add a favicon file in a ",(0,i.jsx)(n.code,{children:".png"})," format. Refer to ",(0,i.jsx)(n.a,{href:"https://docs.n8n.io/integrations/creating-nodes/build/declarative-style-node/#step-2-add-an-icon",children:"n8n docs"})," to learn more."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"step-3-deploy-a-node",children:"Step 3: Deploy a node"}),"\n",(0,i.jsxs)(n.p,{children:["To install the node locally refer to the ",(0,i.jsx)(n.a,{href:"https://docs.n8n.io/integrations/creating-nodes/deploy/install-private-nodes/",children:"n8n documentation"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"how-to-use-the-dial-api-custom-node-in-your-workflows",children:"How to Use the DIAL API Custom Node in Your Workflows"}),"\n",(0,i.jsx)(n.h5,{id:"prerequisites-1",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"n8n installed and set up with custom DIAL API node."}),"\n",(0,i.jsx)(n.li,{children:"DIAL API key (required for authentication)."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"step-1-access-the-dial-api-custom-node",children:"Step 1: Access the DIAL API custom node"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Log in to your n8n instance."}),"\n",(0,i.jsx)(n.li,{children:'Go to the "New Workflow" page or open an existing workflow where you want to use the DIAL custom node.'}),"\n",(0,i.jsx)(n.li,{children:'Drag and drop the DIAL API custom node onto the canvas from the Nodes panel (you can search for it by typing "DIAL API" in the search bar).'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(48896).Z+"",width:"854",height:"345"})}),"\n",(0,i.jsx)(n.h3,{id:"step-2-authenticate-the-dial-api-custom-node",children:"Step 2: Authenticate the DIAL API custom node"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Open the Credentials tab in the DIAL node configuration."}),"\n",(0,i.jsx)(n.li,{children:"Provide the DIAL API Key in the required credentials field."}),"\n",(0,i.jsx)(n.li,{children:"If you saved the API key as part of the credential infrastructure during node creation, just select the appropriate credentials from the dropdown."}),"\n",(0,i.jsx)(n.li,{children:"Test your connection by running the workflow and confirming successful authentication."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(33321).Z+"",width:"867",height:"385"})}),"\n",(0,i.jsx)(n.h3,{id:"step-3-use-dial-api-custom-node-in-a-workflow",children:"Step 3: Use DIAL API custom node in a Workflow"}),"\n",(0,i.jsx)(n.p,{children:"The DIAL API node is designed to be compatible with other n8n nodes, making it easy to chain actions and automate processes."}),"\n",(0,i.jsxs)(n.p,{children:["Refer to ",(0,i.jsx)(n.a,{href:"#examples-of-workflows",children:"Examples of Workflows"})," to see how you can use it in different scenarios."]}),"\n",(0,i.jsx)(n.h3,{id:"examples-of-workflows",children:"Examples of Workflows"}),"\n",(0,i.jsx)(n.h4,{id:"dial-chat-completion",children:"DIAL Chat Completion"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Scenario"}),": You want to pass the user\u2019s input into DIAL to receive a response from LLM."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(70700).Z+"",width:"946",height:"438"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Add an \u201cOn chat message\u201d trigger node to capture user input."}),"\n",(0,i.jsx)(n.li,{children:"Connect the chat trigger node to the DIAL API node and use the chat data as input"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"User Input: {{ $json.chatInput }}\nOperation: Chat Completion\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(41802).Z+"",width:"1123",height:"396"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"The DIAL API response must have a specific JSON format to be sent properly to the n8n chat."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{ "output": "<response text>" }\n'})}),"\n",(0,i.jsx)(n.p,{children:"Add a Code node (Python) to transform the output from the DIAL API node to a proper format."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"return { 'output': _input.first().json.choices[0].message.content }\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(9338).Z+"",width:"925",height:"483"})})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},48896:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/n8n1-f65afe6a2b7e92092ac745d973cc7354.png"},33321:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/n8n2-01606ecbf20ac8517e117a16d78afa7c.png"},70700:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/n8n3-40756f02e27a770cdb7e9fb04f52229f.png"},41802:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/n8n4-3e4de6380d040195f9bcdfd4c7f34344.png"},9338:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/n8n5-641c99e70e242d6f58303add2f5cd6b9.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var i=t(67294);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);