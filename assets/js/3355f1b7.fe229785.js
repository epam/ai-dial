"use strict";(self.webpackChunkdial=self.webpackChunkdial||[]).push([[313],{8625:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=n(5893),i=n(1151);const o={},r="Custom Buttons in Apps",a={id:"tutorials/custom-buttons",title:"Custom Buttons in Apps",description:"Introduction",source:"@site/docs/tutorials/custom-buttons.md",sourceDirName:"tutorials",slug:"/tutorials/custom-buttons",permalink:"/tutorials/custom-buttons",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"CustomSideBar",previous:{title:"Analytics",permalink:"/tutorials/realtime-analytics"},next:{title:"Using Databricks Models in AI DIAL",permalink:"/tutorials/use-databricks-model"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Types of Buttons",id:"types-of-buttons",level:2},{value:"How to Enable Buttons",id:"how-to-enable-buttons",level:2},{value:"Populate Button",id:"populate-button",level:3},{value:"Action Button",id:"action-button",level:3},{value:"Checkbox Button",id:"checkbox-button",level:3},{value:"Buttons Workflow",id:"buttons-workflow",level:2},{value:"This is a typical workflow:",id:"this-is-a-typical-workflow",level:5}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h5:"h5",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"custom-buttons-in-apps",children:"Custom Buttons in Apps"}),"\n",(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(t.p,{children:"AI DIAL applications can include logic that requires rendering of additional controls (buttons) on the AI DIAL Chat UI to facilitate a specific interactive experience for chat users during conversations."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(7139).Z+"",width:"1292",height:"614"})}),"\n",(0,s.jsx)(t.h2,{id:"types-of-buttons",children:"Types of Buttons"}),"\n",(0,s.jsx)(t.p,{children:"AI DIAL supports several standard types of buttons. Applications can use any or all of them at the same time. These types are defined based on the behavior they enable."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Starter"}),": initiates a conversation with the selected agent according to the specific scenario."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Populate"}),": provides users with recommended responses or prompts. When pressed, the predefined text message is populated in the chat box."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Action"}),": fixed-choice buttons to enable a structured conversation flow, crucial in a particular application logic e.g. customer support chat bot. When pressed, the application prompts the user to take a specific action."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Checkbox"}),": this type of button allows users to select between multiple options e.g. choosing datasets or preferences within the chat."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"how-to-enable-buttons",children:"How to Enable Buttons"}),"\n",(0,s.jsxs)(t.p,{children:["AI DIAL applications use ",(0,s.jsx)(t.a,{href:"https://json-schema.org/",children:"JSON Schema"})," to define custom buttons to be rendered by AI DIAL Chat on UI. A JSON schema describing the buttons must follow the ",(0,s.jsx)(t.a,{target:"_blank",href:n(3669).Z+"",children:"JSON meta-schema"})," that defines DIAL buttons."]}),"\n",(0,s.jsxs)(t.p,{children:["To enable AI DIAL Chat to render custom buttons on UI, an application must provide a specific JSON in the response to the chat completion/configuration request from AI DIAL Chat. Refer to ",(0,s.jsx)(t.a,{href:"#buttons-workflow",children:"Buttons Workflow"})," for details."]}),"\n",(0,s.jsx)(t.p,{children:"Such JSON must include parameters associated with buttons:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"chatMessageInputDisabled"}),": a Boolean flag that determines whether the chat box is enabled or disabled for user\u2019s text input."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"definitions"}),": additional definitions:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["An Object defining the Enumeration options for the checkbox button:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"enumNames"}),": a list of names that will be rendered on UI."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"enum"}),": enumeration values."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://json-schema.org/understanding-json-schema/reference/object#properties",children:(0,s.jsx)(t.code,{children:"properties"})}),": an Object with the properties of buttons in the ",(0,s.jsx)(t.code,{children:"key:value"})," format, where the key is the name of a button, and the value is the schema with the parameters:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Button name:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"type"}),": must be a ",(0,s.jsx)(t.a,{href:"https://json-schema.org/understanding-json-schema/reference/numeric#number",children:"Number"})," to render a button and an ",(0,s.jsx)(t.a,{href:"https://json-schema.org/understanding-json-schema/reference/array",children:"Array"})," to render checkboxes."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"title"}),": a String with the title of a button to be rendered on UI. Provided for checkboxes."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"description"}),": a String with the description of a button."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"items"}),": the reference to definitions in schema. Provided for the definition of checkboxes."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://json-schema.org/understanding-json-schema/reference/array#uniqueItems",children:(0,s.jsx)(t.code,{children:"uniqueItems"})}),": a Boolean flag indicating whether items in an array are unique. Used with checkboxes."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"dial:widget"}),": a reference to a custom widget that will render the button property. Available options: buttons. Do not include for checkboxes."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"oneOf"}),": an Array of JSON schemas of buttons. Must be defined if ",(0,s.jsx)(t.code,{children:'"dial:widget": "buttons"'}),".","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://json-schema.org/understanding-json-schema/reference/const#constant-values",children:(0,s.jsx)(t.code,{children:"const"})}),": a keyword assigning a constant value for a button."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"title"}),": a String with the title of a button to be rendered on UI."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"dial:widgetOptions"}),": additional options of a button:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"confirmationMessage"}),": a String with the text to be rendered in the confirmation window invoke upon pressing the button."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"populateText"}),": a String with the text to be populated in the chat box after pressing the button."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"submit"}),": a Boolean flag that determines whether the form is to be submitted after pressing the button."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"required"}),": an Array of required button properties."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Following are examples of JSON schemas for specific types of buttons."}),"\n",(0,s.jsx)(t.h3,{id:"populate-button",children:"Populate Button"}),"\n",(0,s.jsxs)(t.p,{children:["This is the example of a JSON schema for a ",(0,s.jsx)(t.strong,{children:"Populate"})," button:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "type": "object",\n  "properties": {\n    "conversation_starter_button": {\n      "description": "Conversation starters",\n      "type": "number",\n      "dial:widget": "buttons",\n      "oneOf": [\n        {\n          "const": 1,\n          "title": "Introduce yourself",\n          "dial:widgetOptions": { "populateText": "Who are you?" }\n        },\n        {\n          "const": 2,\n          "title": "Your capabilities",\n          "dial:widgetOptions": { "populateText": "What can you do?" }\n        }\n      ]\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"In this example:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:'Two populate buttons will be rendered: "Introduce yourself" and "Your capabilities".'}),"\n",(0,s.jsxs)(t.li,{children:["Chat box is enabled for editing by the user because ",(0,s.jsx)(t.code,{children:'"chatMessageInputDisabled"'})," property is not defined."]}),"\n",(0,s.jsxs)(t.li,{children:['Chat text box will be populated with "Introduce yourself" or "Your capabilities", after pressing a corresponding button. Note, that to populate the chat box with some text after pressing the button you should explicitly set the ',(0,s.jsx)(t.code,{children:'"populateText"'})," value with the desired text."]}),"\n",(0,s.jsxs)(t.li,{children:["Depending on the button pressed, the DIAL Chat creates the JSON value corresponding to the JSON schema: ",(0,s.jsx)(t.code,{children:'{ "conversation_starter_button": 1 }'})," and sends it attached to a chat completion request."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"action-button",children:"Action Button"}),"\n",(0,s.jsxs)(t.p,{children:["This is the example of a JSON schema for an ",(0,s.jsx)(t.strong,{children:"Action"})," button:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "type": "object",\n  "dial:chatMessageInputDisabled": true,\n  "properties": {\n    "agreement_button": {\n      "description": "Indicate user agreement with the privacy policy",\n      "type": "number",\n      "dial:widget": "buttons",\n      "oneOf": [\n        {\n          "const": 1,\n          "title": "Agree",\n          "dial:widgetOptions": {\n            "confirmationMessage": "Are you sure you agree with the privacy policy?", \n            "submit": true\n          }\n        },\n        {\n          "const": 2,\n          "title": "Decline",\n          "dial:widgetOptions": {\n            "confirmationMessage": "Are you sure you decline the privacy policy?", \n            "submit": true\n          }\n        }\n      ]\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"In this example:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Chat UI will render two action buttons: Agree and Decline."}),"\n",(0,s.jsxs)(t.li,{children:["The chat box is disabled for editing by the user because ",(0,s.jsx)(t.code,{children:'"chatMessageInputDisabled"'})," property is set to ",(0,s.jsx)(t.code,{children:"false"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["When the button is pressed, the confirmation window is displayed with the message from the ",(0,s.jsx)(t.code,{children:"confirmationMessage"})," property value of a corresponding button."]}),"\n",(0,s.jsx)(t.li,{children:"The form is immediately submitted after pressing the button in the confirmation window."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"checkbox-button",children:"Checkbox Button"}),"\n",(0,s.jsxs)(t.p,{children:["This is the example of a JSON schema for a ",(0,s.jsx)(t.strong,{children:"Checkbox"})," button. In this example, the user is presented with a choice between two buttons defined as ",(0,s.jsx)(t.code,{children:"enumNames"}),': "RAG" or "Web search". No more than one could be pressed.']}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "type": "object",\n  "definitions": {\n    "datasourcesEnum": {\n      "enumNames": ["RAG", "Web search"],\n      "enum": ["rag", "web_search"]\n    }\n  },\n  "properties": {\n    "datasources": {\n      "description": "Additional datasources for chat completion request",\n      "title": "Additional datasources",\n      "type": "array",\n      "uniqueItems": true,\n      "items": {\n        "$ref": "#/definitions/datasourcesEnum"\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"buttons-workflow",children:"Buttons Workflow"}),"\n",(0,s.jsxs)(t.p,{children:["Only options explicitly defined in ",(0,s.jsx)(t.code,{children:"dial:widgetOptions"})," are executed. If any of them is not defined (for example ",(0,s.jsx)(t.code,{children:'"populateText"'})," is not defined), then this option is omitted:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["To insert text into the chat box upon pressing the button, set the ",(0,s.jsx)(t.code,{children:'"populateText"'})," option with the desired text."]}),"\n",(0,s.jsxs)(t.li,{children:["To invoke a confirmation prompt upon pressing the button, set the ",(0,s.jsx)(t.code,{children:'"confirmationMessage"'})," option to the necessary text."]}),"\n",(0,s.jsxs)(t.li,{children:["To enable submission of the form upon pressing the button, explicitly set the ",(0,s.jsx)(t.code,{children:'"submit"'})," option to ",(0,s.jsx)(t.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["If ",(0,s.jsx)(t.code,{children:"dial:widgetOptions"})," are not specified and the user interacts with the buttons, the form property values will be populated, but no additional actions will be taken."]}),"\n",(0,s.jsx)(t.h5,{id:"this-is-a-typical-workflow",children:"This is a typical workflow:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["AI DIAL Chat receives a JSON form from the application with the response to a chat completion or configuration request. This JSON schema describing the form is passed in the ",(0,s.jsx)(t.code,{children:"choices[*].message.custom_content.form_schema"})," field value."]}),"\n",(0,s.jsxs)(t.li,{children:["When a user interacts with buttons and the chat, the AI DIAL Chat sends a chat completion request to the application with the filled form schema matching the JSON schema by appending it to the ",(0,s.jsx)(t.code,{children:"custom_content.form_value"}),' field of the user message. For example, if the user selects the button with the text "Introduce yourself" in the example with the ',(0,s.jsx)(t.a,{href:"#populate-button",children:"Populate button"}),", the ",(0,s.jsx)(t.code,{children:"form_value"})," in the chat completion request will be  populated with ",(0,s.jsx)(t.code,{children:'{ "conversation_starter_button": 1 }'}),'. In case of a checkbox, if the user selects "RAG" in the example with the ',(0,s.jsx)(t.a,{href:"#checkbox-button",children:"Checkbox button"}),", the ",(0,s.jsx)(t.code,{children:"form_value"})," will be populated with: ",(0,s.jsx)(t.code,{children:'"datasources ": ["rag"]'}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"If the user chooses not to use buttons and instead just to send a message in the chat box, there are two available options:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["If all fields in the form are optional, the chat completion request will not include ",(0,s.jsx)(t.code,{children:"form_value"})," with the JSON form ."]}),"\n",(0,s.jsx)(t.li,{children:"If any of the fields in the form is indicated as required, the user will be prompted to take action before submitting messages in chat."}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},3669:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/files/metaschema-09fe2fa3417deee491703cf7c138afc2.json"},7139:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/app-button-3dab8f98f6bccaa70b1541b01bc7e2db.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>r});var s=n(7294);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);