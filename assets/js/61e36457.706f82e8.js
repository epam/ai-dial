"use strict";(self.webpackChunkdial=self.webpackChunkdial||[]).push([[2740],{28398:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=t(85893),o=t(11151);const r={},s="Load Balancer",a={id:"platform/core/load-balancer",title:"Load Balancer",description:"Introduction",source:"@site/docs/platform/3.core/5.load-balancer.md",sourceDirName:"platform/3.core",slug:"/platform/core/load-balancer",permalink:"/platform/core/load-balancer",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"CustomSideBar",previous:{title:"PII Compliance & Privacy",permalink:"/platform/core/privacy"},next:{title:"Interceptors",permalink:"/platform/core/interceptors"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Standard Load Balancer",id:"standard-load-balancer",level:2},{value:"Advanced Load Balancer",id:"advanced-load-balancer",level:2},{value:"Tiers",id:"tiers",level:3},{value:"Weights",id:"weights",level:3},{value:"Fallbacks",id:"fallbacks",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"load-balancer",children:"Load Balancer"}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Load balancing is crucial for distributing requests to LLMs across various resources, preventing bottlenecks, enhancing fault tolerance and keeping costs under control."}),"\n",(0,i.jsx)(n.p,{children:"Using the DIAL Load Balancer, you can flexibly distribute load across model deployments, regions, and cloud subscriptions, prioritizing PTU deployments before using per-token-cost options."}),"\n",(0,i.jsx)(n.p,{children:"You have the option to set up a simple strategy by directing requests to specific endpoints, or you can choose a more sophisticated approach by customizing a combination of parameters."}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["You can configure load balancing in DIAL Core ",(0,i.jsx)(n.a,{href:"https://github.com/epam/ai-dial-core?tab=readme-ov-file#dynamic-settings",children:"dynamic settings"})," by defining ",(0,i.jsx)(n.code,{children:"upstream"})," parameters for models. These parameters can be dynamically adjusted without the need to redeploy the DIAL Core."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class Upstream {\n    private String endpoint; // required\n    private String key; // optional\n    private int tier = 0; // default weight if not specified\n    private int weight = 1; // default weight if not specified\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": in a cluster, DIAL Core nodes do share the state of endpoints, which may cause a certain asynchronization in their work routing the requests."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Configuration example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'    "models": {\n        "chat-gpt-35-turbo": {\n            "upstreams": [\n                {\n                    "endpoint": "http://localhost:7001",\n                    "key": "modelKey",\n                    "weight": 1,\n                    "tier": 0\n                },\n            ],\n        }\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:"where:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"endpoint"})," - the model endpoint. The only ",(0,i.jsx)(n.strong,{children:"required"})," parameter."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"key"})," - model API key"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"weight"})," - the endpoint capacity as a share of the total traffic"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tier"})," - specifies an endpoint group"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In the following sections, you can get familiar with specific combinations of these parameter for configuring load balancer algorithms."}),"\n",(0,i.jsx)(n.h2,{id:"standard-load-balancer",children:"Standard Load Balancer"}),"\n",(0,i.jsx)(n.p,{children:"Standard load balancer follows the round-robin approach. The incoming traffic is distributed evenly across all resources. Each new request is sent to the next endpoint in line, and the process repeats cyclically. Once the end of the list is reached, it starts over from the first endpoint. This can be efficient in scenarios where all resources have similar capabilities and the tasks they handle are roughly equivalent in terms of resource consumption."}),"\n",(0,i.jsx)(n.p,{children:"Example of configuration of AI DIAL Core:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"models": {\n    "chat-gpt-35-turbo": {\n        "upstreams": [\n            {\n                "endpoint": "https://hostname1/openai/deployments/gpt-4-32k-0613/chat/completions"\n            },\n            {\n                "endpoint": "https://hostname2/openai/deployments/gpt-4-32k-0613/chat/completions"\n            },\n            {\n                "endpoint": "https://hostname3/openai/deployments/gpt-4-32k-0613/chat/completions"\n            },\n        ]\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this scenario, requests are distributed between endpoints in the order specified in the configuration. By default, the ",(0,i.jsx)(n.code,{children:"weight"})," is set to ",(0,i.jsx)(n.code,{children:"1"})," and ",(0,i.jsx)(n.code,{children:"tier"})," to ",(0,i.jsx)(n.code,{children:"0"})," for all of them."]}),"\n",(0,i.jsx)(n.h2,{id:"advanced-load-balancer",children:"Advanced Load Balancer"}),"\n",(0,i.jsxs)(n.p,{children:["You can use a combination of ",(0,i.jsx)(n.code,{children:"weight"})," and ",(0,i.jsx)(n.code,{children:"tier"})," parameters to define a more complex load balancing algorithm."]}),"\n",(0,i.jsx)(n.h3,{id:"tiers",children:"Tiers"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"tier"})," to aggregate endpoints in groups. In a regular scenario, all requests are routed to endpoints with the lowest ",(0,i.jsx)(n.code,{children:"tier"}),",\nbut in case of the outage or hitting the limits, the second in line ",(0,i.jsx)(n.code,{children:"tier"})," helps to handle the load."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, requests will be routed to a group of endpoints with ",(0,i.jsx)(n.code,{children:'"tier": 0'})," before they go to a group with ",(0,i.jsx)(n.code,{children:'"tier": 1'}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The default value is 0, which signifies the highest tier."}),"\n",(0,i.jsx)(n.p,{children:"Example of configuration of DIAL Core:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"models": {\n    "chat-gpt-35-turbo": {\n        "upstreams": [\n            {\n                "endpoint": "https://hostname1/openai/deployments/gpt-4-32k-0613/chat/completions",\n                "tier": 0\n            },\n            {\n                "endpoint": "https://hostname2/openai/deployments/gpt-4-32k-0613/chat/completions",\n                "tier": 0\n            },\n            {\n                "endpoint": "https://hostname3/openai/deployments/gpt-4-32k-0613/chat/completions",\n                "tier": 1\n            },\n        ]\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this scenario, requests are distributed between groups of endpoints in the order specified in the configuration. By default, the ",(0,i.jsx)(n.code,{children:"weight"})," is set to ",(0,i.jsx)(n.code,{children:"1"}),"for all of them."]}),"\n",(0,i.jsx)(n.h3,{id:"weights",children:"Weights"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"weight"})," inside groups of endpoints to allocate a share of the total traffic for specific endpoints. Endpoints get a share of requests with probability proportional to their weights."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": ",(0,i.jsx)(n.code,{children:"weight"})," can be used only in combination with ",(0,i.jsx)(n.code,{children:"tier"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The default value is 1."}),"\n",(0,i.jsx)(n.p,{children:"A positive value represents an endpoint capacity, zero or negative - disables the endpoint from routing."}),"\n",(0,i.jsx)(n.p,{children:"Example of configuration of DIAL Core:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"models": {\n    "chat-gpt-35-turbo": {\n        "upstreams": [\n            {\n                "endpoint": "https://hostname1/openai/deployments/gpt-4-32k-0613/chat/completions",\n                "tier": 0,\n                "weight": 3\n            },\n            {\n                "endpoint": "https://hostname2/openai/deployments/gpt-4-32k-0613/chat/completions",\n                "tier": 0,\n                "weight": 2\n            },\n            {\n                "endpoint": "https://hostname3/openai/deployments/gpt-4-32k-0613/chat/completions",\n                "tier": 1,\n                "weight": 1\n            },\n        ]\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this configuration, requests are initially directed to ",(0,i.jsx)(n.code,{children:"tier 0"}),".  Within this tier, requests are distributed among ",(0,i.jsx)(n.code,{children:"hostname1"})," and ",(0,i.jsx)(n.code,{children:"hostname2"})," with probability proportional to their weights. If ",(0,i.jsx)(n.code,{children:"tier 0"})," is unavailable or reaches its capacity limits, the remaining traffic is then routed to ",(0,i.jsx)(n.code,{children:"tier 1"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"fallbacks",children:"Fallbacks"}),"\n",(0,i.jsx)(n.p,{children:"Fallback logic is designed to ensure system resilience and optimize request handling when upstream endpoints fail or become unavailable. It helps prevent repeated retries to the same endpoint and provides a structured approach to redirect requests to alternative endpoints."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Endpoint Selection"}),": If endpoints in the lower tier become unavailable, the traffic goes to the group of endpoints that have a higher tier."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Retry Limitation"}),": To prevent excessive retries to a specific deployment, the ",(0,i.jsx)(n.code,{children:"maxRetryAttempts"})," parameter can be configured in ",(0,i.jsx)(n.a,{href:"https://github.com/epam/ai-dial-core?tab=readme-ov-file#dynamic-settings",children:"DIAL Core dynamic settings"}),". The default value is 5 for language models and 1 for applications."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fallback"}),": If all upstream endpoints are unavailable, the fallback algorithm will attempt to send the request to an endpoint that previously returned a 500 (Internal Server Error) or 429 (Too Many Requests) error code. This fallback is conditional and depends on the endpoint meeting predefined criteria, ensuring that even temporarily failing endpoints can be used if necessary."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>s});var i=t(67294);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);