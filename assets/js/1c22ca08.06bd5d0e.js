"use strict";(self.webpackChunkdial=self.webpackChunkdial||[]).push([[1116],{38606:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=t(85893),i=t(11151);const s={title:"How to call DALL\xb7E-3 with configuration"},o=void 0,l={id:"tutorials/developers/apps-development/multimodality/dial-cookbook/examples/how_to_call_dalle_3_with_configuration",title:"How to call DALL\xb7E-3 with configuration",description:"DALL\xb7E-3 model exposes certain request",source:"@site/docs/tutorials/1.developers/4.apps-development/3.multimodality/dial-cookbook/examples/how_to_call_dalle_3_with_configuration.mdx",sourceDirName:"tutorials/1.developers/4.apps-development/3.multimodality/dial-cookbook/examples",slug:"/tutorials/developers/apps-development/multimodality/dial-cookbook/examples/how_to_call_dalle_3_with_configuration",permalink:"/tutorials/developers/apps-development/multimodality/dial-cookbook/examples/how_to_call_dalle_3_with_configuration",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"How to call DALL\xb7E-3 with configuration"},sidebar:"CustomSideBar",previous:{title:"How to call image-to-text DIAL applications",permalink:"/tutorials/developers/apps-development/multimodality/dial-cookbook/examples/how_to_call_image_to_text_applications"},next:{title:"Integration between DIAL and Microsoft Copilot",permalink:"/tutorials/developers/integrations/copilot-to-dial"}},r={},c=[{value:"Setup",id:"setup",level:2},{value:"Listing metadata",id:"listing-metadata",level:2},{value:"Configuration schema",id:"configuration-schema",level:2},{value:"Image generation",id:"image-generation",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",div:"div",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["DALL\xb7E-3 model exposes certain request\n",(0,a.jsx)(n.a,{href:"https://platform.openai.com/docs/api-reference/images/create",children:"parameters"}),"\u2014such\nas ",(0,a.jsx)(n.code,{children:"quality"}),", ",(0,a.jsx)(n.code,{children:"size"}),", and ",(0,a.jsx)(n.code,{children:"style"}),"\u2014that are missing from the ",(0,a.jsx)(n.a,{href:"https://dialx.ai/dial_api#/paths/~1openai~1deployments~1%7BDeployment%20Name%7D~1chat~1completions/post",children:"DIAL chat\ncompletion\nrequest"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["However, DIAL supports passing these model-specific parameters through\nthe ",(0,a.jsx)(n.code,{children:"custom_fields.configuration"})," field in the chat completion request."]}),"\n",(0,a.jsx)(n.p,{children:"This notebook demonstrates how to call the DALL\xb7E-3 model with those\nadditional parameters using DIAL\u2019s configuration mechanics."}),"\n",(0,a.jsxs)(n.div,{className:"jupyter",children:["\n        ",(0,a.jsxs)(n.a,{href:"https://github.com/epam/ai-dial/blob/main/dial-cookbook/examples/how_to_call_dalle_3_with_configuration.ipynb",target:"_blank",rel:"noopener noreferrer",children:[(0,a.jsx)(n.img,{className:"no-zoom",src:"/jupyter.svg",alt:"Jupyter"})," View Jupyter Notebook"]}),"\n    "]}),"\n",(0,a.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(n.p,{children:"Install the necessary dependencies and import the libraries we are going\nto use."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"!pip install -q openai==1.43.0\n!pip install -q httpx==0.27.2\n!pip install -q pillow==11.1.0\n!pip install -q python-dotenv==1.0.1\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import openai # OpenAI Python library to make API calls to DIAL Chat Completion API\nimport httpx # HTTP client library to make API calls to DIAL File API\nfrom PIL import Image  # used to print images\nfrom dotenv import load_dotenv # used to pick up DIAL credential from the local .env file if it exists\n\nload_dotenv(override=True)\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"True\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Set the DIAL URL and your API key either by setting them in the local\n",(0,a.jsx)(n.code,{children:".env"})," file or by setting the variables in the notebook explicitly."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import os\n\ndial_url = os.environ.get("DIAL_URL") or "YOUR_DIAL_URL"\ndial_api_key = os.environ.get("DIAL_API_KEY") or "YOUR_DIAL_API_KEY"\ndial_deployment = os.environ.get("DALLE3_DEPLOYMENT_NAME") or "YOUR_DALLE3_DEPLOYMENT_NAME"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Configure HTTP client to call the DIAL API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'http_client = httpx.Client(base_url=dial_url, headers={"api-key": dial_api_key})\n'})}),"\n",(0,a.jsx)(n.h2,{id:"listing-metadata",children:"Listing metadata"}),"\n",(0,a.jsx)(n.p,{children:"First of all, we need to make sure that the given deployment does\nactually exist and is available for us to use."}),"\n",(0,a.jsxs)(n.p,{children:["This could be done by inspecting the ",(0,a.jsx)(n.a,{href:"https://epam-rail.com/dial_api#tag/Deployment-listing/operation/getModel",children:"listing\ninformation"}),"\nfor this deployment:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'listing_response = http_client.get(f"/openai/deployments/{dial_deployment}")\nlisting_response.raise_for_status()\ndeployment_metadata = listing_response.json()\nprint(deployment_metadata)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"{'id': 'dall-e-3', 'model': 'dall-e-3', 'display_name': 'DALL-E 3', 'icon_url': 'gpt3.svg', 'description': 'DALL-E is a machine-learning model developed by OpenAI. It is designed to produce images from language descriptions, a process known as text-to-image descriptions or prompts.\\n\\nThe system can generate realistic images just from a description of the scene. DALL-E is a neural network algorithm that creates accurate pictures from short phrases provided by the user. It comprehends language through textual descriptions and from \u201clearning\u201d information provided in its datasets by users and developers.', 'reference': 'dall-e-3', 'owner': 'organization-owner', 'object': 'model', 'status': 'succeeded', 'created_at': 1672534800, 'updated_at': 1672534800, 'features': {'rate': False, 'tokenize': False, 'truncate_prompt': False, 'configuration': True, 'system_prompt': False, 'tools': False, 'seed': False, 'url_attachments': False, 'folder_attachments': False, 'allow_resume': True, 'accessible_by_per_request_key': True, 'content_parts': False, 'temperature': True, 'addons': True, 'cache': False, 'auto_caching': False}, 'defaults': {}, 'description_keywords': ['Image Generation'], 'max_retry_attempts': 5, 'lifecycle_status': 'generally-available', 'capabilities': {'scale_types': ['standard'], 'completion': False, 'chat_completion': True, 'embeddings': False, 'fine_tune': False, 'inference': False}, 'pricing': {'unit': 'token', 'prompt': '0', 'completion': '0.04'}}\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Troubleshooting"})}),"\n",(0,a.jsxs)(n.p,{children:["The request fails when either of the ",(0,a.jsx)(n.code,{children:"dial_*"})," variables is not set\ncorrectly."]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Incorrect DIAL URL leads in ",(0,a.jsx)(n.code,{children:"ConnectError"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Incorrect API key leads to ",(0,a.jsx)(n.code,{children:"401 Unauthorized error"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Non existing deployment name results in ",(0,a.jsx)(n.code,{children:"404 Not Found error"})]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["In the last case, you may request the ",(0,a.jsx)(n.a,{href:"https://epam-rail.com/dial_api#tag/Deployment-listing/operation/getModels",children:"whole\nlisting"}),"\nand pick the correct deployment name for DALL\xb7E-3 in your DIAL\ninstance:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'all_models = http_client.get("/openai/deployments").json()\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["What is of interest to us is the features supported by this model. The\nfeature flags are stored in the ",(0,a.jsx)(n.code,{children:"features"})," field of the deployment\nlisting. The flag ",(0,a.jsx)(n.code,{children:"features.configuration"})," indicates that the model is\nconfigurable."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'features = deployment_metadata[\'features\']\nprint(f"Deployment features")\nprint(features)\nis_configurable = features[\'configuration\']\nprint(f"Deployment is configurable: {is_configurable}")\nassert is_configurable, "Deployment is not configurable"\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"Deployment features\n{'rate': False, 'tokenize': False, 'truncate_prompt': False, 'configuration': True, 'system_prompt': False, 'tools': False, 'seed': False, 'url_attachments': False, 'folder_attachments': False, 'allow_resume': True, 'accessible_by_per_request_key': True, 'content_parts': False, 'temperature': True, 'addons': True, 'cache': False, 'auto_caching': False}\nDeployment is configurable: True\n"})}),"\n",(0,a.jsx)(n.h2,{id:"configuration-schema",children:"Configuration schema"}),"\n",(0,a.jsxs)(n.p,{children:["A deployment is configurable when it exposes the configuration endpoint:\n",(0,a.jsx)(n.code,{children:"v1/models/{model_name}/configuration"}),". This endpoint returns ",(0,a.jsx)(n.a,{href:"https://json-schema.org/",children:"JSON\nSchema"})," for the configuration object that can\nbe passed to the model in chat completion requests."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'configuration_schema_response = http_client.get(f"/v1/deployments/{dial_deployment}/configuration")\nconfiguration_schema_response.raise_for_status()\nconfiguration_schema = configuration_schema_response.json()\nprint(configuration_schema)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"{'title': 'Dalle3Config', 'type': 'object', 'properties': {'quality': {'title': 'Quality', 'description': 'The quality of the image that will be generated.', 'anyOf': [{'enum': ['standard', 'hd'], 'type': 'string'}, {'type': 'string'}]}, 'size': {'title': 'Size', 'description': 'The size of the generated images.', 'anyOf': [{'enum': ['1024x1024', '1792x1024', '1024x1792'], 'type': 'string'}, {'type': 'string'}]}, 'style': {'title': 'Style', 'description': 'The style of the generated images.', 'anyOf': [{'enum': ['vivid', 'natural'], 'type': 'string'}, {'type': 'string'}]}}}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The schema says that the configuration may contain any of the following\noptional fields: - ",(0,a.jsx)(n.code,{children:"quality"})," - the quality of the generated image\n(",(0,a.jsx)(n.code,{children:"standard"})," or ",(0,a.jsx)(n.code,{children:"hd"}),") - ",(0,a.jsx)(n.code,{children:"size"})," - the size of the generated image (one of\n",(0,a.jsx)(n.code,{children:"1024x1024"}),", ",(0,a.jsx)(n.code,{children:"1792x1024"}),", ",(0,a.jsx)(n.code,{children:"1024x1792"}),") - ",(0,a.jsx)(n.code,{children:"style"})," - the style of the\ngenerated image (",(0,a.jsx)(n.code,{children:"vivid"})," or ",(0,a.jsx)(n.code,{children:"natural"}),")"]}),"\n",(0,a.jsx)(n.h2,{id:"image-generation",children:"Image generation"}),"\n",(0,a.jsxs)(n.p,{children:["The DIAL deployment could be called via ",(0,a.jsx)(n.a,{href:"https://pypi.org/project/openai/",children:"OpenAI Python\nSDK"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'openai_client = openai.AzureOpenAI(\n    azure_endpoint=dial_url,\n    azure_deployment=dial_deployment,\n    api_key=dial_api_key,\n    api_version="2023-12-01-preview",\n)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Let\u2019s call the model with the configuration provided in the\n",(0,a.jsx)(n.code,{children:"custom_fields.configuration"})," field of the chat completion request. The\nfirst user message contains the prompt for the DALL\xb7E-3 model."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'dalle3_config = {\n    "quality": "hd",\n    "size": "1792x1024",\n    "style": "vivid"\n}\n\nchat_completion = openai_client.chat.completions.create(\n    messages=[{"role": "user", "content": "cats"}],\n    model=dial_deployment,\n    extra_body={"custom_fields": {"configuration": dalle3_config}}\n)\nprint(chat_completion)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"ChatCompletion(id='chatcmpl-96ab4f47-4ae3-4227-965a-e236b3ca46a1', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='', refusal=None, role='assistant', function_call=None, tool_calls=None, custom_content={'attachments': [{'title': 'Revised prompt', 'data': 'A warm, sunny landscape with several cats. Some cats are napping peacefully under the shade of a large tree, while others are playfully chasing butterflies. A few cats are curiously exploring, their tails flicking with interest. Their fur has varied colors like orange, black, white, and grey. A shallow stream runs through the middle of the scene, and a Mama cat is teaching her kittens how to drink from it.'}, {'title': 'Image', 'type': 'image/png', 'url': 'files/7vUVRwvWDh53WKUnmGV21ndnvsnpgZT9urEnPxnepjnF/appdata/dall-e-3/images/e644fea57d202b724178f1980592c50d56f77560979854b99a1d724afe958424.png'}]}))], created=1742401425, model=None, object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=1, prompt_tokens=0, total_tokens=1))\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Note"})}),"\n",(0,a.jsxs)(n.p,{children:["The configuration value that doesn\u2019t follow the schema ",(0,a.jsxs)(n.em,{children:["(such as\n",(0,a.jsx)(n.code,{children:'{"quality": 42}'}),")"]})," will lead to an invalid request error."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The chat completion response contains two attachments: one with the\nrevised prompt and the other with the generated image."}),"\n",(0,a.jsx)(n.p,{children:"The revised prompt is an elaborated version of the original prompt that\nwas generated by the DALL\xb7E-3 model before the image generation."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'message = chat_completion.choices[0].message\nattachments = message.custom_content["attachments"]\nrevised_prompt = attachments[0]["data"]\nprint(f"Revised prompt: {revised_prompt}")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"Revised prompt: A warm, sunny landscape with several cats. Some cats are napping peacefully under the shade of a large tree, while others are playfully chasing butterflies. A few cats are curiously exploring, their tails flicking with interest. Their fur has varied colors like orange, black, white, and grey. A shallow stream runs through the middle of the scene, and a Mama cat is teaching her kittens how to drink from it.\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The second attachment contains a link to the DIAL file storage where the\ngenerated image is stored. It could be accessed via the ",(0,a.jsx)(n.a,{href:"https://epam-rail.com/dial_api#tag/Files/operation/downloadFile",children:"DIAL File\nAPI"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'image_url = attachments[1]["url"]\nprint(f"Image URL: {image_url}")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"Image URL: files/7vUVRwvWDh53WKUnmGV21ndnvsnpgZT9urEnPxnepjnF/appdata/dall-e-3/images/e644fea57d202b724178f1980592c50d56f77560979854b99a1d724afe958424.png\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# set a directory to save DALL\xb7E-3 images to\nimage_dir_name = "images"\nimage_dir = os.path.join(os.curdir, image_dir_name)\nimage_filepath = os.path.join(image_dir, "generated_image.png")\n\nos.makedirs(image_dir, exist_ok=True)\n\nfile = http_client.get(f"v1/{image_url}")\n\n# save the image to the image directory\nwith open(image_filepath, "wb") as image_file:\n    image_file.write(file.content)\nprint(f"Image was saved to {image_filepath}")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"Image was saved to ./images/generated_image.png\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"display(Image.open(image_filepath))\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:t(43233).Z+"",width:"1792",height:"1024"})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},43233:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/cell-14-output-1-2278532a5707e8c2ee4d1a816fa35a1c.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>o});var a=t(67294);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);