"use strict";(self.webpackChunkdial=self.webpackChunkdial||[]).push([[6856],{3319:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var n=i(5893),t=i(1151);const s={},o="Main Concepts and Definitions",r={id:"platform/architecture-and-concepts/concepts",title:"Main Concepts and Definitions",description:"Unified API",source:"@site/docs/platform/0.architecture-and-concepts/1.concepts.md",sourceDirName:"platform/0.architecture-and-concepts",slug:"/platform/architecture-and-concepts/concepts",permalink:"/platform/architecture-and-concepts/concepts",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"CustomSideBar",previous:{title:"What is DIAL",permalink:"/platform/architecture-and-concepts/vision"},next:{title:"DIAL Architecture",permalink:"/platform/architecture-and-concepts/architecture"}},l={},c=[{value:"Unified API",id:"unified-api",level:2},{value:"Application Server",id:"application-server",level:2},{value:"Agents",id:"agents",level:2},{value:"DIAL-Native Applications",id:"dial-native-applications",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const a={a:"a",blockquote:"blockquote",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"main-concepts-and-definitions",children:"Main Concepts and Definitions"}),"\n",(0,n.jsx)(a.h2,{id:"unified-api",children:"Unified API"}),"\n",(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.a,{href:"https://dialx.ai/dial_api",children:"DIAL Unified API"}),", based on OpenAI API, gives access to all language and embedding models and applications. It helps create a unification layer where all models and applications are interchangeable, delivering a cohesive conversational experience and future-proof development of GenAI applications."]}),"\n",(0,n.jsx)(a.p,{children:"Compatibility with OpenAI, makes it simple to add new adapters for language models or develop them with DIAL SDK."}),"\n",(0,n.jsx)(a.h2,{id:"application-server",children:"Application Server"}),"\n",(0,n.jsx)(a.p,{children:"DIAL acts as application server offering tools  to develop, deploy, host and manage different types of GenAI applications while handling scalability, availability, security and resource optimization tasks."}),"\n",(0,n.jsx)(a.h2,{id:"agents",children:"Agents"}),"\n",(0,n.jsxs)(a.p,{children:["Agents in DIAL, are all ",(0,n.jsx)(a.a,{href:"/platform/supported-models",children:"available language models"})," and ",(0,n.jsx)(a.a,{href:"#dial-native-applications",children:"DIAL-native applications"}),". DIAL can serve as an agentic platform, where you can use any agent as building block to create powerful multi-agent and multi-modal applications."]}),"\n",(0,n.jsxs)(a.p,{children:["DIAL includes powerful pre-built agents such as ",(0,n.jsx)(a.a,{href:"/video%20demos/Applications/dial-chathub",children:"DIAL ChatHub"}),", ",(0,n.jsx)(a.a,{href:"/video%20demos/Applications/dial-rag",children:"DIAL RAG"}),", ",(0,n.jsx)(a.a,{href:"/video%20demos/Applications/dial-web-rag",children:"DIAL Web RAG"})," which you can reuse in your agents as building blocks."]}),"\n",(0,n.jsxs)(a.p,{children:["You can create agents using ",(0,n.jsx)(a.a,{href:"https://github.com/epam/ai-dial-sdk/blob/development/README.md",children:"DIAL SDK"})," and ",(0,n.jsx)(a.a,{href:"https://dialx.ai/dial_api",children:"DIAL API"}),", or no-code and low-code ",(0,n.jsx)(a.a,{href:"/tutorials/user-guide#application-builder",children:"application wizards"}),"."]}),"\n",(0,n.jsxs)(a.p,{children:["When ready, you can list your agents in ",(0,n.jsx)(a.a,{href:"/platform/chat/marketplace",children:"DIAL Marketplace"})," and enable others to use them or even contribute to the development."]}),"\n",(0,n.jsx)(a.h2,{id:"dial-native-applications",children:"DIAL-Native Applications"}),"\n",(0,n.jsxs)(a.p,{children:["DIAL-native apps have API that adheres to ",(0,n.jsx)(a.a,{href:"https://dialx.ai/dial_api",children:"Unified API of DIAL"}),". You can use your apps as agents in DIAL seamlessly if they meet this requirement."]}),"\n",(0,n.jsxs)(a.p,{children:["Yo can create DIAL-native apps using ",(0,n.jsx)(a.a,{href:"https://github.com/epam/ai-dial-sdk/blob/development/README.md",children:"DIAL SDK"})," and also no-code and low-code ",(0,n.jsx)(a.a,{href:"/tutorials/user-guide#application-builder",children:"application wizards"})]}),"\n",(0,n.jsx)(a.h2,{id:"resources",children:"Resources"}),"\n",(0,n.jsx)(a.p,{children:"In DIAL, resources refer to applications, conversations, prompts, and files. When added to the system, these resources are stored in a dedicated folder within a BLOB storage account bucket assigned to your user account. Resources can be managed using a consistent pattern, including CRUD operations (Create, Read, Update, Delete), publishing, sharing, and other actions."}),"\n",(0,n.jsxs)(a.blockquote,{children:["\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:["In ",(0,n.jsx)(a.a,{href:"https://dialx.ai/dial_api",children:"DIAL API"})," you can find dedicated sections for working with resources: ",(0,n.jsx)(a.a,{href:"https://dialx.ai/dial_api#tag/Applications",children:"applications"}),", ",(0,n.jsx)(a.a,{href:"https://dialx.ai/dial_api#tag/Conversations",children:"conversations"}),", ",(0,n.jsx)(a.a,{href:"https://dialx.ai/dial_api#tag/Prompts",children:"prompts"})," and ",(0,n.jsx)(a.a,{href:"https://dialx.ai/dial_api#tag/Files",children:"files"}),"."]}),"\n",(0,n.jsxs)(a.li,{children:["Refer to ",(0,n.jsx)(a.a,{href:"/platform/collaboration-intro",children:"Collaboration"})," to learn about collaboration features such as sharing and publication that can be applied to resources."]}),"\n",(0,n.jsxs)(a.li,{children:["Refer to ",(0,n.jsx)(a.a,{href:"/tutorials/user-guide#applications",children:"Applications"})," to learn how to develop, add and manage apps in DIAL."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:a}={...(0,t.a)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,a,i)=>{i.d(a,{Z:()=>r,a:()=>o});var n=i(7294);const t={},s=n.createContext(t);function o(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);